type Query {
    booking(id: ID!): Booking
    bookings(bookingFilterInput: BookingFilterInput!): [Booking]!
}

type Mutation {
    createBooking(booking: BookingInput!, bookingEventData: BookingEventData!): Booking
    updateBooking(id: ID!, booking: BookingUpdateInput!, bookingEventData: BookingEventData!): Booking
    deleteBooking(id: ID!, bookingEventData: BookingEventData!): Boolean!
}

enum Status {
    pending
    successful
    cancelled
    unknown
}

type User @key(fields: "userId") @extends{
    userId: ID @external
    bookings: [Booking]
}

type Booking @key(fields: "propertyId") {
    id: ID
    userId: ID
    propertyId: ID
    bookingDate: String
    status: Status
    createdAt: String
    updatedAt: String
}

input BookingFilterInput {
    page: Int!
    limit: Int!
    userId: ID
    propertyId: ID
}

input BookingInput {
    userId: ID!
    propertyId: ID!
    status: Status
    bookingDate: String!
}

input BookingUpdateInput {
    status: Status
    bookingDate:String
}

input BookingEventData {
    bookingId: ID
    userContact: String!
    agentContact: String!
    propertyInfo: PropertyInfo!
}

input PropertyInfo {
    propertyId: ID!
    propertyTitle: String!
}